# ************************************
# Managed by Puppet
# ************************************
#--------------------------------------------------------
# To use an environment variable, use the following syntax :  ${env:NAME_OF_ENV_VARIABLE}
# For example :
#   sonar.jdbc.url: ${env:SONAR_JDBC_URL}
#
#
# See also the file conf/wrapper.conf for JVM advanced settings
#---------------------------------------------------------
# WEB SETTINGS - STANDALONE MODE ONLY
# These settings are ignored when the war file is deployed to a JEE server.
#---------------------------------------------------------
# Listen host/port and context path (for example / or /sonar). Default values are 0.0.0.0:9000/.
<% if $sonarqube::host { -%>
sonar.web.host:                           <%= $sonarqube::host %>
<% } else { -%>
#sonar.web.host:                           0.0.0.0
<% } -%>
sonar.web.port:                           <%= $sonarqube::port %>
sonar.ajp.port:                           <%= $sonarqube::portajp %>
<% if defined('$sonarqube::context_path') { -%>
sonar.web.context:                        <%= $sonarqube::context_path %>
<% } -%>

# Log HTTP requests. Deactivated by default.
#sonar.web.jettyRequestLogs: ../../logs/jetty-yyyy_mm_dd.request.log

#sonar.web.jetty.threads.min:              5
#sonar.web.jetty.threads.max:              50

# Web server is executed in a dedicated Java process. By default heap size is 768Mb.
# Use the following property to customize JVM options.
#    Recommendations:
#
#    The HotSpot Server VM is recommended. The property -server should be added if server mode
#    is not enabled by default on your environment: http://docs.oracle.com/javase/7/docs/technotes/guides/vm/server-class.html
#
#    Set min and max memory (respectively -Xms and -Xmx) to the same value to prevent heap
#    from resizing at runtime.
#
<% if $sonarqube::web_java_opts { -%>
sonar.web.javaOpts=<%= $sonarqube::web_java_opts %>
<% } -%>

<% if !empty($sonarqube::https) { -%>
#-------------------
# SonarQube Https Configuration
#-------------------


# TCP port for incoming HTTPS connections. Disabled when value is -1 (default).

<% if $sonarqube::https['port'] { -%>
sonar.web.https.port=<%= $sonarqube::https['port'] %>
<% } else { -%>
sonar.web.https.port=-1
<% } -%>

# HTTPS - the alias used to for the server certificate in the keystore.
# If not specified the first key read in the keystore is used.

<% if $sonarqube::https['keyalias'] { -%>
sonar.web.https.keyAlias=<%= $sonarqube::https['keyalias'] %>
<% } else { -%>
# sonar.web.https.keyAlias=
<% } -%>

# HTTPS - the pathname of the keystore file where is stored the server certificate.
# By default, the pathname is the file ".keystore" in the user home.
# If keystoreType doesn't need a file use empty value.

<% if $sonarqube::https['keystorefile'] { -%>
sonar.web.https.keystoreFile=<%= $sonarqube::https['keystorefile'] %>
<% } else { -%>
# sonar.web.https.keystoreFile=
<% } -%>

# HTTPS - the password used to access the specified keystore file. The default
# value is the value of sonar.web.https.keyPass.

<% if $sonarqube::https['keystorepass'] { -%>
sonar.web.https.keystorePass=<%= $sonarqube::https['keystorepass'] %>
<% } else { -%>
# sonar.web.https.keystorePass=
<% } -%>

# HTTPS - the password used to access the server certificate from the
# specified keystore file. The default value is "changeit".

<% if $sonarqube::https['keypass'] { -%>
sonar.web.https.keyPass=<%= $sonarqube::https['keypass'] %>
<% } else { -%>
# sonar.web.https.keyPass=changeit
<% } -%>

# HTTPS - the type of keystore file to be used for the server certificate.
# The default value is JKS (Java KeyStore).

<% if $sonarqube::https['keystoretype'] { -%>
sonar.web.https.keystoreType=<%= $sonarqube::https['keystoretype'] %>
<% } else { -%>
# sonar.web.https.keystoreType=
<% } -%>

<% } -%>

#--------------------------------------------------------------------------------------------------
# COMPUTE ENGINE
# The Compute Engine is responsible for processing background tasks.
# Compute Engine is executed in a dedicated Java process. Default heap size is 512Mb.
# Use the following property to customize JVM options.
#    Recommendations:
#
#    The HotSpot Server VM is recommended. The property -server should be added if server mode
#    is not enabled by default on your environment:
#    http://docs.oracle.com/javase/8/docs/technotes/guides/vm/server-class.html
#
<% if $sonarqube::ce_java_opts { -%>
sonar.ce.javaOpts=<%= $sonarqube::ce_java_opts %>
<% } -%>

# Same as previous property, but allows to not repeat all other settings like -Xmx
#sonar.ce.javaAdditionalOpts=
# The number of workers in the Compute Engine. Value must be greater than zero.
# By default the Compute Engine uses a single worker and therefore processes tasks one at a time.
#    Recommendations:
#
#    Using N workers will require N times as much Heap memory (see property
#    sonar.ce.javaOpts to tune heap) and produce N times as much IOs on disk, database and
#    Elasticsearch. The number of workers must suit your environment.
<% if $sonarqube::ce_workercount { -%>
sonar.ce.workerCount=<%= $sonarqube::ce_workercount %>
<% } -%>

#--------------------------------------------------------------------------------------------------
# ELASTICSEARCH
# Elasticsearch is used to facilitate fast and accurate information retrieval.
# It is executed in a dedicated Java process.

# JVM options of Elasticsearch process
#    Recommendations:
#
#    Use HotSpot Server VM. The property -server should be added if server mode
#    is not enabled by default on your environment: http://docs.oracle.com/javase/7/docs/technotes/guides/vm/server-class.html
#
#    Set min and max memory (respectively -Xms and -Xmx) to the same value to prevent heap
#    from resizing at runtime.
#
<% if $sonarqube::search_java_opts { -%>
sonar.search.javaOpts=<%= $sonarqube::search_java_opts %>
<% } -%>

sonar.search.port=<%= $sonarqube::search_port %>
sonar.search.host=<%= $sonarqube::search_host %>

<% if $sonarqube::search_java_additional_opts { -%>
sonar.search.javaAdditionalOpts=<%= $sonarqube::search_java_additional_opts %>
<% } -%>
#-----------------------------------------------------------------------
# DATABASE
#
# IMPORTANT : the embedded database Derby is used by default.
# It is recommended for tests only. Please use an external database
# for production environment (MySQL, Oracle, Postgresql, SQLServer)
#
#-----------------------------------------------------------------------

<% if !empty($sonarqube::jdbc) { -%>

#----- Credentials
# Permissions to create tables and indexes must be granted to JDBC user.
# The schema must be created first.
<% if ($sonarqube::jdbc['url'] =~ /^jdbc:h2/) { -%>
sonar.embeddedDatabase.port:               9092
<% } else { -%>
sonar.jdbc.url:         <%= $sonarqube::jdbc['url'] %>
sonar.jdbc.username:    <%= $sonarqube::jdbc['username'] %>
sonar.jdbc.password:    <%= $sonarqube::jdbc['password'] %>
<% } -%>

#----- Embedded database H2
# Note : it does not accept connections from remote hosts, so the
# SonarQube server and the maven plugin must be executed on the same host.

# Comment the following line to deactivate the default embedded database.
#sonar.jdbc.url:                            jdbc:h2:tcp://localhost:9092/sonar

# directory containing H2 database files. By default it's the /data directory in the SonarQube installation.
#sonar.embeddedDatabase.dataDir:
# H2 embedded database server listening port, defaults to 9092
#sonar.embeddedDatabase.port:               9092


#----- MySQL 5.x
# Comment the embedded database and uncomment the following line to use MySQL
#sonar.jdbc.url:                            jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true


#----- Oracle 10g/11g
# To connect to Oracle database :
#
# - It's recommended to use the latest version of the JDBC driver (ojdbc6.jar).
#   Download it in http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html
# - Copy the driver to the directory extensions/jdbc-driver/oracle/
# - Comment the embedded database and uncomment the following line :
#sonar.jdbc.url:                            jdbc:oracle:thin:@localhost/XE
#

# Uncomment the following property if the Oracle account has permissions to access multiple schemas,
# for example sonar schemas with different versions. In that case, use the same property during project analysis
# (-Dsonar.jdbc.schema=<schema>)
# The schema is case-sensitive.
#sonar.jdbc.schema:                         sonar


#----- PostgreSQL 8.x/9.x
# Comment the embedded database and uncomment the following property to use PostgreSQL
#sonar.jdbc.url:                            jdbc:postgresql://localhost/sonar


# Uncomment the following property if the PostgreSQL account has permissions to access multiple schemas,
# for example sonar schemas with different versions. In that case, use the same property during project analysis
# (-Dsonar.jdbc.schema=<schema>)
#sonar.jdbc.schema:                         public


#----- Microsoft SQLServer
# The Jtds open source driver is available in extensions/jdbc-driver/mssql. More details on http://jtds.sourceforge.net
#sonar.jdbc.url:                            jdbc:jtds:sqlserver://localhost/sonar;SelectMethod=Cursor


#----- Connection pool settings
sonar.jdbc.maxActive:                      <% if $sonarqube::jdbc['max_active'] { %><%= $sonarqube::jdbc['max_active'] %><% } else { %>50<% } %>
sonar.jdbc.maxIdle:                        <% if $sonarqube::jdbc['max_idle'] { %><%= $sonarqube::jdbc['max_idle'] %><% } else { %>5<% } %>
sonar.jdbc.minIdle:                        <% if $sonarqube::jdbc['min_idle'] { %><%= $sonarqube::jdbc['min_idle'] %><% } else { %>2<% } %>
sonar.jdbc.maxWait:                        <% if $sonarqube::jdbc['max_wait'] { %><%= $sonarqube::jdbc['max_wait'] %><% } else { %>5000<% } %>
sonar.jdbc.minEvictableIdleTimeMillis:     <% if $sonarqube::jdbc['min_evictable_idle_time_millis'] { %><%= $sonarqube::jdbc['min_evictable_idle_time_millis'] %><% } else { %>600000<% } %>
sonar.jdbc.timeBetweenEvictionRunsMillis:  <% if $sonarqube::jdbc['time_between_eviction_runs_millis'] { %><%= $sonarqube::jdbc['time_between_eviction_runs_millis'] %><% } else { %>30000<% } %>

<% } -%>

<% if !empty($sonarqube::sso) { -%>
#---------------------------------------------------------
# SSO AUTHENTICATION
#---------------------------------------------------------
<% if $sonarqube::sso['enable'] { -%>
# Enable authentication using HTTP headers
sonar.web.sso.enable=<%= $sonarqube::sso['enable'] %>
<% } -%>

# Name of the header to get the user login.
# Only alphanumeric, '.' and '@' characters are allowed
<% if 'loginheader' in $sonarqube::sso { -%>
sonar.web.sso.loginHeader=<%= $sonarqube::sso['loginheader'] %>
<% } else { -%>
#sonar.web.sso.loginHeader=X-Forwarded-Login
<% } -%>

# Name of the header to get the user name
<% if 'nameheader' in $sonarqube::sso { -%>
sonar.web.sso.nameHeader=<%= $sonarqube::sso['nameheader'] %>
<% } else { -%>
#sonar.web.sso.nameHeader=X-Forwarded-Name
<% } -%>

# Name of the header to get the user email (optional)
<% if 'emailheader' in $sonarqube::sso { -%>
sonar.web.sso.emailHeader=<%= $sonarqube::sso['emailheader'] %>
<% } else { -%>
#sonar.web.sso.emailHeader=X-Forwarded-Email
<% } -%>

# Name of the header to get the list of user groups, separated by comma (optional).
# If the sonar.sso.groupsHeader is set, the user will belong to those groups if groups exist in SonarQube.
# If none of the provided groups exists in SonarQube, the user will only belong to the default group.
# Note that the default group will always be set.
<% if 'groupsheader' in $sonarqube::sso { -%>
sonar.web.sso.groupsHeader=<%= $sonarqube::sso['groupsheader'] %>
<% } else { -%>
#sonar.web.sso.groupsHeader=X-Forwarded-Groups
<% } -%>

# Interval used to know when to refresh name, email and groups.
# During this interval, if for instance the name of the user is changed in the header, it will only be updated after X minutes.
<% if 'refreshintervalinminutes' in $sonarqube::sso { -%>
sonar.web.sso.refreshIntervalInMinutes=<%= $sonarqube::sso['refreshintervalinminutes'] %>
<% } else { -%>
#sonar.web.sso.refreshIntervalInMinutes=5
<% } -%>
<% } -%>

#---------------------------------------------------------
# UPDATE CENTER
#---------------------------------------------------------

# The Update Center requires an internet connection to request http://update.sonarsource.org
# It is activated by default:
sonar.updatecenter.activate=<%= $sonarqube::updatecenter %>

<% if !empty($sonarqube::http_proxy) { -%>
# HTTP proxy (default none)
http.proxyHost=<%= $sonarqube::http_proxy['host'] %>
http.proxyPort=<%= $sonarqube::http_proxy['port'] %>

# NT domain name if NTLM proxy is used
http.auth.ntlm.domain=<%= $sonarqube::http_proxy['ntlm_domain'] %>

# proxy authentication. The 2 following properties are used for HTTP and SOCKS proxies.
http.proxyUser=<%= $sonarqube::http_proxy['user'] %>
http.proxyPassword=<%= $sonarqube::http_proxy['password'] %>

# non proxy hosts (default localhost|127.*|[::1])
http.nonProxyHosts=<%= $sonarqube::http_proxy['non_proxy_hosts'] %>

<% } -%>

# SOCKS proxy (default none)
#socksProxyHost=
#socksProxyPort=

#---------------------------------------------------------
# NOTIFICATIONS
#---------------------------------------------------------

# Delay (in seconds) between processing of notification queue
sonar.notifications.delay=60


<% if !empty($sonarqube::ldap) { -%>
#-------------------
# SonarQube LDAP Plugin
# Reference: http://docs.sonarqube.org/display/SONAR/LDAP+Plugin
#-------------------

# IMPORTANT : before activation, make sure that one SonarQube administrator is defined in the external system
# Activates the plugin. Leave blank or comment out to use default SonarQube authentication.
sonar.security.realm=LDAP
<% if $sonarqube::ldap['save_password'] { -%>
sonar.security.savePassword=<%= $sonarqube::ldap['save_password'] %>
<% } else { -%>
sonar.security.savePassword=true
<% } -%>
<% if $sonarqube::ldap['local_users'] =~ Array { -%>
sonar.security.localUsers=<%= join($sonarqube::ldap['local_users'], ',') %>
<% } elsif $sonarqube::ldap['local_users'] =~ String and !empty($sonarqube::ldap['local_users']) { -%>
sonar.security.localUsers=<%= $sonarqube::ldap['local_users'] %>
<% } -%>
<% if $sonarqube::ldap['authenticator_downcase'] { -%>
sonar.authenticator.downcase=<%= $sonarqube::ldap['authenticator_downcase'] %>
<% } -%>

<% if $sonarqube::ldap['url'] { -%>
ldap.url=<%= $sonarqube::ldap['url'] %>

<% if $sonarqube::ldap['follow_referrals'] { -%>
ldap.followReferrals=<%= $sonarqube::ldap['follow_referrals'] %>
<% } -%>

<% if $sonarqube::ldap['bind_dn'] { -%>
ldap.bindDn=<%= $sonarqube::ldap['bind_dn'] %>
<% } -%>
<% if $sonarqube::ldap['bind_password'] { -%>
ldap.bindPassword=<%= $sonarqube::ldap['bind_password'] %>
<% } -%>
<% if $sonarqube::ldap['authentication'] { -%>
ldap.authentication=<%= $sonarqube::ldap['authentication'] %>
<% } -%>
<% if $sonarqube::ldap['starttls'] { -%>
ldap.StartTLS=<%= $sonarqube::ldap['starttls'] %>
<% } -%>

<% if $sonarqube::ldap['user_base_dn'] { -%>
ldap.user.baseDn=<%= $sonarqube::ldap['user_base_dn'] %>
<% } -%>
<% if $sonarqube::ldap['user_request'] { -%>
ldap.user.request=<%= $sonarqube::ldap['user_request'] %>
<% } -%>
<% if $sonarqube::ldap['user_real_name_attribute'] { -%>
ldap.user.realNameAttribute=<%= $sonarqube::ldap['user_real_name_attribute'] %>
<% } -%>
<% if $sonarqube::ldap['user_email_attribute'] { -%>
ldap.user.emailAttribute=<%= $sonarqube::ldap['user_email_attribute'] %>
<% } -%>

<% if $sonarqube::ldap['group_base_dn'] { -%>
ldap.group.baseDn=<%= $sonarqube::ldap['group_base_dn'] %>
<% } -%>
<% if $sonarqube::ldap['group_request'] { -%>
ldap.group.request=<%= $sonarqube::ldap['group_request'] %>
<% } -%>
<% if $sonarqube::ldap['group_id_attribute'] { -%>
ldap.group.idAttribute=<%= $sonarqube::ldap['group_id_attribute'] %>
<% } -%>
<% } elsif $sonarqube::ldap['servers'] { -%>
ldap.servers=<%= join($sonarqube::ldap['servers'].map | $server | { $server['id'].regsubst(/-\./, '_', 'G') }, ',') %>

<% $sonarqube::ldap['servers'].each | $server | { -%>
<% $server_id = $server['id'].regsubst(/-\./, '_', 'G') -%>
ldap.<%= $server_id -%>.realm=<%= $server['realm'] %>
ldap.<%= $server_id -%>.url=<%= $server['url'] %>
<% if $server['bind_dn'] { -%>
ldap.<%= $server_id -%>.bindDn=<%= $server['bind_dn'] %>
<% } -%>
<% if $server['bind_password'] { -%>
ldap.<%= $server_id -%>.bindPassword=<%= $server['bind_password'] %>
<% } -%>
<% if $server['user_base_dn'] { -%>
ldap.<%= $server_id -%>.user.baseDn=<%= $server['user_base_dn'] %>
<% } -%>
<% if $server['user_request'] { -%>
ldap.<%= $server_id -%>.user.request=<%= $server['user_request'] %>
<% } -%>
<% if $server['user_real_name_attribute'] { -%>
ldap.<%= $server_id -%>.user.realNameAttribute=<%= $server['user_real_name_attribute'] %>
<% } -%>
<% if $server['user_email_attribute'] { -%>
ldap.<%= $server_id -%>.user.emailAttribute=<%= $server['user_email_attribute'] %>
<% } -%>
<% if $server['group_base_dn'] { -%>
ldap.<%= $server_id -%>.group.baseDn=<%= $server['group_base_dn'] %>
<% } -%>
<% if $server['group_request'] { -%>
ldap.<%= $server_id -%>.group.request=<%= $server['group_request'] %>
<% } -%>
<% if $server['group_id_attribute'] { -%>
ldap.<%= $server_id -%>.group.idAttribute=<%= $server['group_id_attribute'] %>
<% } -%>
<% if $server['authentication'] { -%>
ldap.<%= $server_id -%>.authentication=<%= $server['authentication'] %>
<% } -%>

<% } -%>
<% } -%>
<% } elsif !empty($sonarqube::pam) { -%>

# PAM authentication
sonar.security.realm: PAM
<% if $sonarqube::pam['serviceName'] { -%>
pam.serviceName=<%= $sonarqube::pam['serviceName'] %>
<% } -%>

<% } -%>

<% if !empty($sonarqube::crowd) { %>
#-------------------
# Sonar Crowd Plugin
#-------------------
# IMPORTANT : before activation, make sure that one Sonar administrator is defined in the external system
# Activates the plugin. Leave blank or comment out to use default sonar authentication.
sonar.authenticator.class: org.sonar.plugins.crowd.CrowdAuthenticator

# Ignore failure at startup if the connection to external system is refused.
# Users can browse sonar but not log in as long as the connection fails.
# When set to true, Sonar will not start if connection to external system fails.
# Default is false.
#sonar.authenticator.ignoreStartupFailure: true

# Automatically create users (available since Sonar 2.0).
# When set to true, user will be created after successful authentication, if doesn't exists.
# The default group affected to new users can be defined online, in Sonar general settings. The default value is "sonar-users".
# Default is false.
sonar.authenticator.createUsers: true

# URL of the Crowd server (usually ends with /services/).
crowd.url: <%= $sonarqube::crowd['service_url'] %>

# Crowd application name.
# Default is 'sonar'.
crowd.application: <%= $sonarqube::crowd['application'] %>

# Crowd application password.
crowd.password: <%= $sonarqube::crowd['password'] %>
<% } %>
